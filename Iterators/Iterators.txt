Iterators:  An iterator is an object that can be iterated upon, meaning that you can traverse through all the values. Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().
			We can also use a for loop to iterate through an iterable object:
				mystr = "banana"

				for x in mystr:
				  print(x) 
			
			The for loop actually creates an iterator object and executes the next() method for each loop.
			
			class PowTwo:
			
				def __init__(self, max=0):
					self.max = max

				def __iter__(self):
					self.n = 0
					return self

				def __next__(self):
					if self.n <= self.max:
						result = 2 ** self.n
						self.n += 1
						return result
					else:
						raise StopIteration

			# create an object
			numbers = PowTwo(3)

			# create an iterable from the object
			i = iter(numbers)

			# Using next to get to the next iterator element
			print(next(i))
			print(next(i))
			print(next(i))
			print(next(i))
			print(next(i))

			Output
			1
			2
			4
			8
			Traceback (most recent call last):
			  File "/home/bsoyuj/Desktop/Untitled-1.py", line 32, in <module>
				print(next(i))
			  File "<string>", line 18, in __next__
				raise StopIteration
			StopIteration

