Functions

Functions are block of code which allow us to order our code, make it more readable, reuse it and save time.
	
In python function name is given by using def as a keyword. 

Sample code:

def my_function():
    print("Hello World!")
	
my_function()

The above is a simple example of python function which simply prints Hello World!.

To call this function we can just call the function by specifying it's name.

Passing argument to a function:

For immutable objects:Changing immutable objects inside a function will create new instances and original instances are not changed. This is for string, number and tuple.

def try_to_change(x,str):
    x = x + 1
    str = "my message inside function"
 
a = 1
s = "my message outside function"
 
# call function to try to change immutable object
try_to_change(a,s)
 
# immutable object cannot be changed
print(a)
print(s)
#1
#my message outside function

For mutable objects: Any changes made inside of function will affect to the instance of outside function. This is for list, dictionary, class instance.

def try_to_change(list1,list2):
    list1.append(3)
    # reassign mutable object
    list2 = [40,50,60]
 
list1 = [1,2]
list2 = [4,5,6]
 
# change to mutable objects
try_to_change(list1,list2)
 
print(list1)
print(list2)
 
# Output
#[1, 2, 3]
#[4, 5, 6]

Assign function to a variable: Function name is like variable and can be assigned to variable. We can call function under that variable name.

def buble_sort():
    print('bubble sort')
def quick_sort():
    print('quick sort')
 
sorts = []
 
sort = buble_sort # assign function to a variable
sorts.append(sort)
sort = quick_sort # assign function to a variable
sorts.append(sort)
 
for i in range(len(sorts)):
    sorts[i]()
	
Nested Function: Function within a function is a nested function.
	
def average(a,b,c):
    def total(a,b,c):
        return a + b + c
    return total(a,b,c) / 3
 
print(average(1,2,3))


Recursive function: Function calling itself inside it's body is called Recursive Function.

def f(n):
    if n == 1:
        return 1
    else:
        return n * f(n-1)
print(f(5)) # f(5) = 1 x 2 x 3 x 4 x 5 = 120


