CSV and Json Data:

CSV Data: CSV (Comma Separated Values) is a simple file format used to store tabular data, such as a spreadsheet or database. A CSV file stores tabular data (numbers and text) in plain text. Each line of the file is a data record. Each record consists of one or more fields, separated by commas. The use of the comma as a field separator is the source of the name for this file format.For working CSV files in python, there is an inbuilt module called csv.

Writing to a CSV file:

# importing the csv module 
import csv 
  
# field names 
fields = ['Name', 'Branch', 'Year', 'CGPA'] 
  
# data rows of csv file 
rows = [ ['Nikhil', 'COE', '2', '9.0'], 
         ['Sanchit', 'COE', '2', '9.1'], 
         ['Aditya', 'IT', '2', '9.3'], 
         ['Sagar', 'SE', '1', '9.5'], 
         ['Prateek', 'MCE', '3', '7.8'], 
         ['Sahil', 'EP', '2', '9.1']] 
  
# name of csv file 
filename = "university_records.csv"
  
# writing to csv file 
with open(filename, 'w') as csvfile: 
    # creating a csv writer object 
    csvwriter = csv.writer(csvfile) 
      
    # writing the fields 
    csvwriter.writerow(fields) 
      
    # writing the data rows 
    csvwriter.writerows(rows)


JSON Data: JSON is a syntax for storing and exchanging data. JSON is text, written with JavaScript object notation. Python has a built-in package called json, which can be used to work with JSON data.
			In python we can import the json module by using 'import json'. 
			
			Parse JSON - Convert from JSON to Python: If we have a JSON string, we can parse it by using the json.loads() method.The result will be a Python dictionary.
			
			Example
				Convert from JSON to Python:
				
				import json

				x =  '{ "name":"John", "age":30, "city":"New York"}'

				y = json.loads(x)
	
				# the result is a Python dictionary:
				print(y["age"]) 

			Output: 30
			
			Convert from Python to JSON: If you have a Python object, you can convert it into a JSON string by using the json.dumps() method.
			
			Example

				Convert from Python to JSON:
				import json

				x = {
				  "name": "John",
				  "age": 30,
				  "city": "New York"
				}

				# convert into JSON:
				y = json.dumps(x)

				# the result is a JSON string:
				print(y) 
				
			We can convert Python objects of the following types, into JSON strings: dict,list,tuple,string,int,float,True,False,None
