Decorators: A decorator takes in a function, adds some functionality and returns it. 

			Code: 
				def div(a,b):
					print(a/b)
					
				def smart_div(func):
					
					def inner(a,b):
						if a<b:
							a,b = b,a
						return func(a,b)
						
					return inner
				
				div  = smart_div(div)
				
				div(2,4)
				
			Output: 2.0
			
			Code:
				def hello_decorator(func): 
			
					def inner1(*args, **kwargs): 
						  
						print("before Execution") 
						  
						# getting the returned value 
						returned_value = func(*args, **kwargs) 
						print("after Execution") 
						  
						# returning the value to the original frame 
						return returned_value 
						  
					return inner1 
				  
				  
				# adding decorator to the function 
				@hello_decorator
				def sum_two_numbers(a, b): 
					print("Inside the function") 
					return a + b 
				  
				a, b = 1, 2
				  
				# getting the value through return of the function 
				print("Sum =", sum_two_numbers(a, b)) 

				Output:

				before Execution
				Inside the function
				after Execution
				Sum = 3