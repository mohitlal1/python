String formating techniques: 
1. String Formatting (% Operator): Strings in Python have a unique built-in operation that can be accessed with the % operator.  the %s format specifier here to tell Python where to substitute the value of name, represented as a string.
									Code: 
									'Hello, %s' % name
									
									Output: 
									"Hello, Bob"
									
2. String Formatting (str.format):  The “new style” string formatting gets rid of the %-operator special syntax and makes the syntax for string formatting more regular. Formatting is now handled by calling .format() on a string object. 			
									Code:
									'Hello, {}'.format(name)
									Output:
									'Hello, Bob'
									
3 String Interpolation / f-Strings: This formatting strings lets you use embedded Python expressions inside string constants.	
									Code: 
									def greet(name, question):
										return f"Hello, {name}! How's it {question}?"
									
									greet('Bob', 'going')
									
									Output:
									"Hello, Bob! How's it going?"
									
4 Template Strings: Template strings are not a core language feature but they’re supplied by the string module in the standard library.
					Code:
					templ_string = 'Hey $name, there is a $error error!'
					Template(templ_string).substitute(name=name, error=hex(errno))
					
					Output:
					'Hey Bob, there is a 0xbadc0ffee error!'
							